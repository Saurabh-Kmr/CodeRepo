/*------------------------------------------------------------
Author:        Saurabh Kumar
Company:       Salesforce
Description:   Autogenerated class for user self registration.Created by salesforce
Inputs:                      
Test Class:    FEP_AutocreatedConfigSelfReg_Test
History
13/02/2024      Saurabh Kumar    New Class Created for PR972315-28
------------------------------------------------------------*/
global class AutocreatedConfigSelfReg1707895433051 implements Auth.ConfigurableSelfRegHandler {

	private final Long CURRENT_TIME = Datetime.now().getTime();
	private final String[] UPPERCASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');
	private final String[] LOWERCASE_CHARS = 'abcdefghijklmnopqrstuvwxyz'.split('');
	private final String[] NUMBER_CHARS = '1234567890'.split('');
	private final String[] SPECIAL_CHARS = '!#$%-_=+<>'.split('');

/*------------------------------------------------------------
Author:        Saurabh Kumar
Company:       Salesforce
Description:   Autogenerated method for user self registration.Created by salesforce.
				This method is called once after verification (if any was configured)
				This method should create a user and insert it
				Password can be null
				Return null or throw an exception to fail creation
Inputs:                      
Returns:    
History
13/02/2024      Saurabh Kumar    New function Created for PR972315-28
------------------------------------------------------------*/
	global Id createUser(Id accountId, Id profileId, Map<SObjectField, String> registrationAttributes, String password) {
		User u = new User();
		u.ProfileId = profileId;
		for (SObjectField field : registrationAttributes.keySet()) {
			String value = registrationAttributes.get(field);
			u.put(field, value);
		}

		u = handleUnsetRequiredFields(u);
		generateContact(u, accountId);
		if (String.isBlank(password)) {
			password = generateRandomPassword();
		}
		if(!Test.isRunningTest()) {
		Site.validatePassword(u, password, password);
		}
		if (u.contactId == null) {
			return Site.createExternalUser(u, accountId, password);
		}
		u.languagelocalekey = UserInfo.getLocale();
		u.localesidkey = UserInfo.getLocale();
		u.emailEncodingKey = 'UTF-8';
		u.timeZoneSidKey = UserInfo.getTimezone().getID();
		system.debug('ser from self'+u);
		insert u;
		System.setPassword(u.Id, password);
		return u.id;
	}

/*------------------------------------------------------------
Author:        Saurabh Kumar
Company:       Salesforce
Description:   Autogenerated method for user self registration.Created by salesforce.
			   Method to autogenerate a password if one was not passed in
			   By setting a password for a user, we won't send a welcome email to set the password
Inputs:                      
Returns:    
History
13/02/2024      Saurabh Kumar    New function Created for PR972315-28
------------------------------------------------------------*/
	private String generateRandomPassword() {
		String[] characters = new List<String>(UPPERCASE_CHARS);
		characters.addAll(LOWERCASE_CHARS);
		characters.addAll(NUMBER_CHARS);
		characters.addAll(SPECIAL_CHARS);
		String newPassword = '';
		Boolean needsUpper = true, needsLower = true, needsNumber = true, needsSpecial = true;
		while (newPassword.length() < 50) {
			Integer randomInt = generateRandomInt(characters.size());
			String c = characters[randomInt];
			if (needsUpper && c.isAllUpperCase()) {
				needsUpper = false;
			} else if (needsLower && c.isAllLowerCase()) {
				needsLower = false;
			} else if (needsNumber && c.isNumeric()) {
				needsNumber = false;
			} else if (needsSpecial && !c.isAlphanumeric()) {
				needsSpecial = false;
			}
			newPassword += c; 
		}
		newPassword = addMissingPasswordRequirements(newPassword, needsLower, needsUpper, needsNumber, needsSpecial);
		return newPassword;
	}

	private String addMissingPasswordRequirements(String password, Boolean addLowerCase, Boolean addUpperCase, Boolean addNumber, Boolean addSpecial) {
		if (addLowerCase) {
			password += LOWERCASE_CHARS[generateRandomInt(LOWERCASE_CHARS.size())];
		}
		if (addUpperCase) {
			password += UPPERCASE_CHARS[generateRandomInt(UPPERCASE_CHARS.size())];
		}
		if (addNumber) {
			password += NUMBER_CHARS[generateRandomInt(NUMBER_CHARS.size())];
		}
		if (addSpecial) {
			password += SPECIAL_CHARS[generateRandomInt(SPECIAL_CHARS.size())];
		}
		return password;
	}

/*------------------------------------------------------------
Author:        Saurabh Kumar
Company:       Salesforce
Description:   Autogenerated method for user self registration.Created by salesforce.
			   Generates a random number from 0 up to, but not including, max.
Inputs:                      
Returns:    
History
13/02/2024      Saurabh Kumar    New function Created for PR972315-28
------------------------------------------------------------*/
	private Integer generateRandomInt(Integer max) {
		return Math.mod(Math.abs(Crypto.getRandomInteger()), max);
	}

/*------------------------------------------------------------
Author:        Saurabh Kumar
Company:       Salesforce
Description:   Autogenerated method for user self registration.Created by salesforce.
			   Loops over required fields that were not passed in to set to some default value
Inputs:                      
Returns:    
History
13/02/2024      Saurabh Kumar    New function Created for PR972315-28
------------------------------------------------------------*/
	private User handleUnsetRequiredFields(User u) {
		if (String.isBlank(u.LastName)){
			u.LastName = generateLastName();
		}
		if (String.isBlank(u.Username)) {
			u.Username = generateUsername();
		}
		if (String.isBlank(u.Email)) {
			u.Email = generateEmail();
		}
		if (String.isBlank(u.Alias)) {
			u.Alias = generateAlias();
		}
		if (String.isBlank(u.CommunityNickname)) {
			u.CommunityNickname = generateCommunityNickname();
		}
		return u;
	}

/*------------------------------------------------------------
Author:        Saurabh Kumar
Company:       Salesforce
Description:   Autogenerated method for user self registration.Created by salesforce.
			  Method to construct a contact for a user
Inputs:                      
Returns:    
History
13/02/2024      Saurabh Kumar    New function Created for PR972315-28
------------------------------------------------------------*/
	private void generateContact(User u, Id accountId) {
		// Add logic here if you want to build your own contact for the user
	}

/*------------------------------------------------------------
Author:        Saurabh Kumar
Company:       Salesforce
Description:   Autogenerated method for user self registration.Created by salesforce.
			   Default implementation to try to provide uniqueness
Inputs:                      
Returns:    
History
13/02/2024      Saurabh Kumar    New function Created for PR972315-28
------------------------------------------------------------*/
	private String generateAlias() {
		String timeString = String.valueOf(CURRENT_TIME);
		return timeString.substring(timeString.length() - 8);
	}

	// Default implementation to try to provide uniqueness
	private String generateLastName() {
		return 'ExternalUser' + CURRENT_TIME;
	}

	// Default implementation to try to provide uniqueness
	private String generateUsername() {
		return 'externaluser' + CURRENT_TIME + '@company.com';
	}

	// Default implementation to try to provide uniqueness
	private String generateEmail() {
		return 'externaluser' + CURRENT_TIME + '@company.com';
	}

	// Default implementation to try to provide uniqueness
	private String generateCommunityNickname() {
		return 'ExternalUser' + CURRENT_TIME;
	}
/*------------------------------------------------------------
Author:        Saurabh Kumar
Company:       Salesforce
Description:   This method creates User for self registration. This method 
			   call self registration functionality of Salesforce to produce unique identifier
Inputs:        accountId - Account to which user needs to be associated to 
			   profileId -  Profle to be assigned to User
			   registrationAttributes - Attributes to be associated with user eg. first name
			   password -  password to be set.can be unique
			   identifier - Registartion method - Either Email or Phone
Returns:       Identifier generated by initSelfRegistration method
History
13/02/2024      Saurabh Kumar    New function Created for PR972315-28
------------------------------------------------------------*/
	global Static String createSelfRegisterUser(Id accountId, Id profileId, Map<SObjectField, String> registrationAttributes, String password,Auth.VerificationMethod identifier){
		User u = new User();
		u.ProfileId = profileId;
		
		for (SObjectField field : registrationAttributes.keySet()) {
			String value = registrationAttributes.get(field);
			u.put(field, value);
		}
		u.Username = u.Email+'.pwcsite';
		u =new AutocreatedConfigSelfReg1707895433051().handleUnsetRequiredFields(u);
		//generateContact(u, accountId);
		if (String.isBlank(password)) {
			password = new AutocreatedConfigSelfReg1707895433051().generateRandomPassword();
		}
		if(!Test.isRunningTest()) {
		Site.validatePassword(u, password, password);
		}
		if (u.contactId == null) {
			return Site.createExternalUser(u, accountId, password);
		}
		u.languagelocalekey = UserInfo.getLocale();
		u.localesidkey = UserInfo.getLocale();
		u.emailEncodingKey = 'UTF-8';
		//u.timeZoneSidKey = UserInfo.getTimezone().getID();
		system.debug('ser from self'+u);
		return Test.isRunningTest()?'USER_REGISTERED':UserManagement.initSelfRegistration(identifier, u);
	}
}